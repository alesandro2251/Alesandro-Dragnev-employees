{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alesa\\\\Desktop\\\\SirmaSolutions_Front-End_React js_Task\\\\sirmasolution_task\\\\src\\\\components\\\\dataCollecting.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataCollecting = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [file, setFile] = useState('');\n  const FileChange = e => {\n    //Takes the name of the file\n    if (e.target.files.length) {\n      const inputFile = e.target.files[0];\n\n      //Takes the format after spliting the 'text/{type of file} and checks if is 'Cvs'\n      const fileExtension = inputFile === null || inputFile === void 0 ? void 0 : inputFile.type.split(\"/\")[1];\n      if (fileExtension !== 'csv') {\n        alert('Input csv file !');\n      } else {\n        alert('correct');\n      }\n      setFile(inputFile);\n    }\n  };\n  const ShowData = () => {\n    const reader = new FileReader();\n    reader.onload = async _ref => {\n      let {\n        target\n      } = _ref;\n      const csv = Papa.parse(target.result, {\n        header: true\n      });\n      const parsedData = csv === null || csv === void 0 ? void 0 : csv.data;\n      for (let i = 0; i < parsedData.length; i++) {\n        const row = Object.values(parsedData[i]);\n        setData(row);\n      }\n      console.log(data);\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Upload file to check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: FileChange,\n      accept: \".csv\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: ShowData,\n      children: \"Show data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.map(idx => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: idx\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(DataCollecting, \"F4qODXyotVveLcAf+4MTZCbpEMA=\");\n_c = DataCollecting;\nexport default DataCollecting;\nvar _c;\n$RefreshReg$(_c, \"DataCollecting\");","map":{"version":3,"names":["React","useState","Papa","DataCollecting","data","setData","file","setFile","FileChange","e","target","files","length","inputFile","fileExtension","type","split","alert","ShowData","reader","FileReader","onload","csv","parse","result","header","parsedData","i","row","Object","values","console","log","readAsText","map","idx"],"sources":["C:/Users/alesa/Desktop/SirmaSolutions_Front-End_React js_Task/sirmasolution_task/src/components/dataCollecting.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Papa from 'papaparse'\r\n\r\nconst DataCollecting = () => {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [file, setFile] = useState('');\r\n\r\n    const FileChange = (e) => {\r\n        //Takes the name of the file\r\n        if (e.target.files.length) {\r\n            const inputFile = e.target.files[0];\r\n\r\n        //Takes the format after spliting the 'text/{type of file} and checks if is 'Cvs'\r\n        const fileExtension = inputFile?.type.split(\"/\")[1];\r\n        if ( fileExtension !== 'csv') {\r\n            alert('Input csv file !');\r\n        }else{\r\n            alert('correct');\r\n        }\r\n        setFile(inputFile);\r\n    }\r\n}\r\n\r\n    const ShowData = () => {\r\n\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = async ({ target }) => {\r\n            const csv = Papa.parse(target.result, { header: true });\r\n            const parsedData = csv?.data;\r\n            for(let i = 0; i < parsedData.length; i++){\r\n                const row = Object.values(parsedData[i]);\r\n                setData(row);\r\n            }\r\n            console.log(data);\r\n        };\r\n        reader.readAsText(file);\r\n\r\n\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <label>Upload file to check</label>\r\n        <input type='file' onChange={FileChange} accept='.csv'/>\r\n        <button onClick={ShowData} >Show data</button>\r\n        <div>\r\n            {\r\n                data.map((idx) => \r\n                <div key={idx}>\r\n                    <p>{idx}</p>\r\n                  </div>)\r\n            }\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default DataCollecting;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,WAAW;AAAA;AAE5B,MAAMC,cAAc,GAAG,MAAM;EAAA;EAEzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMO,UAAU,GAAIC,CAAC,IAAK;IACtB;IACA,IAAIA,CAAC,CAACC,MAAM,CAACC,KAAK,CAACC,MAAM,EAAE;MACvB,MAAMC,SAAS,GAAGJ,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;;MAEvC;MACA,MAAMG,aAAa,GAAGD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACnD,IAAKF,aAAa,KAAK,KAAK,EAAE;QAC1BG,KAAK,CAAC,kBAAkB,CAAC;MAC7B,CAAC,MAAI;QACDA,KAAK,CAAC,SAAS,CAAC;MACpB;MACAV,OAAO,CAACM,SAAS,CAAC;IACtB;EACJ,CAAC;EAEG,MAAMK,QAAQ,GAAG,MAAM;IAEnB,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;IAE/BD,MAAM,CAACE,MAAM,GAAG,cAAsB;MAAA,IAAf;QAAEX;MAAO,CAAC;MAC7B,MAAMY,GAAG,GAAGpB,IAAI,CAACqB,KAAK,CAACb,MAAM,CAACc,MAAM,EAAE;QAAEC,MAAM,EAAE;MAAK,CAAC,CAAC;MACvD,MAAMC,UAAU,GAAGJ,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAElB,IAAI;MAC5B,KAAI,IAAIuB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACd,MAAM,EAAEe,CAAC,EAAE,EAAC;QACtC,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAM,CAACJ,UAAU,CAACC,CAAC,CAAC,CAAC;QACxCtB,OAAO,CAACuB,GAAG,CAAC;MAChB;MACAG,OAAO,CAACC,GAAG,CAAC5B,IAAI,CAAC;IACrB,CAAC;IACDe,MAAM,CAACc,UAAU,CAAC3B,IAAI,CAAC;EAG3B,CAAC;EAED,oBACA;IAAA,wBACI;MAAA,UAAO;IAAoB;MAAA;MAAA;MAAA;IAAA,QAAQ,eACnC;MAAO,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAEE,UAAW;MAAC,MAAM,EAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAE,eACxD;MAAQ,OAAO,EAAEU,QAAS;MAAA,UAAE;IAAS;MAAA;MAAA;MAAA;IAAA,QAAS,eAC9C;MAAA,UAEQd,IAAI,CAAC8B,GAAG,CAAEC,GAAG,iBACb;QAAA,uBACI;UAAA,UAAIA;QAAG;UAAA;UAAA;UAAA;QAAA;MAAK,GADNA,GAAG;QAAA;QAAA;QAAA;MAAA,QAEL;IAAC;MAAA;MAAA;MAAA;IAAA,QAEX;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEV,CAAC;AAAA,GAtDKhC,cAAc;AAAA,KAAdA,cAAc;AAwDpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}