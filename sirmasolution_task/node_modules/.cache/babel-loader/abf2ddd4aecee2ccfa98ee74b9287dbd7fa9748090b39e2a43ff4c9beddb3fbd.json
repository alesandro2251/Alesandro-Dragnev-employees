{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alesa\\\\Desktop\\\\SirmaSolutions_Front-End_React js_Task\\\\sirmasolution_task\\\\src\\\\components\\\\dataCollecting.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport Table from 'react-bootstrap/Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataCollecting = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [key, setKeys] = useState([]);\n  const [file, setFile] = useState('');\n  const FileChange = e => {\n    //Takes the name of the file\n    if (e.target.files.length) {\n      const inputFile = e.target.files[0];\n\n      //Takes the format after spliting the 'text/{type of file} and checks if is 'Cvs'\n      const fileExtension = inputFile === null || inputFile === void 0 ? void 0 : inputFile.type.split(\"/\")[1];\n      if (fileExtension !== 'csv') {\n        alert('Input csv file !');\n      } else {\n        alert('correct');\n      }\n      setFile(inputFile);\n    }\n  };\n  const ShowData = () => {\n    // const reader = new FileReader();\n\n    // reader.onload = async ({ target }) => {\n    //     const csv = Papa.parse(target.result, { header: true });\n    //     const parsedData = csv?.data;\n    //     const colums = Object.keys(parsedData)\n    //     const rows = Object.values(parsedData[0])\n    //     setData(rows);\n    //     setKeys(colums)\n    //     console.log(data, key);\n    // };\n    // reader.readAsText(file);\n\n    Papa.parse(file, {\n      header: true,\n      complete: results => {\n        setData(results.data);\n      }\n    });\n    console.log(file, data);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Upload file to check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: FileChange,\n      accept: \".csv\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: ShowData,\n      children: \"Show data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        striped: \"columns\",\n        bordered: true,\n        hover: true,\n        children: data.map((data, index) => /*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: index\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: data.EmpID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: data.ProjectID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: data.DateFrom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: data.DateTo === 'NULL' ? 'Today' : data.DateTo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(DataCollecting, \"kRvSoMrYSota2CpGeTBq8kezpyM=\");\n_c = DataCollecting;\nexport default DataCollecting;\nvar _c;\n$RefreshReg$(_c, \"DataCollecting\");","map":{"version":3,"names":["React","useState","Papa","Table","DataCollecting","data","setData","key","setKeys","file","setFile","FileChange","e","target","files","length","inputFile","fileExtension","type","split","alert","ShowData","parse","header","complete","results","console","log","map","index","EmpID","ProjectID","DateFrom","DateTo"],"sources":["C:/Users/alesa/Desktop/SirmaSolutions_Front-End_React js_Task/sirmasolution_task/src/components/dataCollecting.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Papa from 'papaparse'\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst DataCollecting = () => {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [key, setKeys] = useState([]);\r\n    const [file, setFile] = useState('');\r\n\r\n    const FileChange = (e) => {\r\n        //Takes the name of the file\r\n        if (e.target.files.length) {\r\n            const inputFile = e.target.files[0];\r\n\r\n        //Takes the format after spliting the 'text/{type of file} and checks if is 'Cvs'\r\n        const fileExtension = inputFile?.type.split(\"/\")[1];\r\n        if ( fileExtension !== 'csv') {\r\n            alert('Input csv file !');\r\n        }else{\r\n            alert('correct');\r\n        }\r\n        setFile(inputFile);\r\n    }\r\n}\r\n\r\n    const ShowData = () => {\r\n\r\n        // const reader = new FileReader();\r\n\r\n        // reader.onload = async ({ target }) => {\r\n        //     const csv = Papa.parse(target.result, { header: true });\r\n        //     const parsedData = csv?.data;\r\n        //     const colums = Object.keys(parsedData)\r\n        //     const rows = Object.values(parsedData[0])\r\n        //     setData(rows);\r\n        //     setKeys(colums)\r\n        //     console.log(data, key);\r\n        // };\r\n        // reader.readAsText(file);\r\n\r\n        Papa.parse(file, {\r\n            header: true,\r\n            complete: results => {\r\n              setData(results.data)\r\n            },\r\n          });\r\n\r\n          console.log(file, data)\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <label>Upload file to check</label>\r\n        <input type='file' onChange={FileChange} accept='.csv'/>\r\n        <button onClick={ShowData} >Show data</button>\r\n        <div>\r\n        {/* { \r\n            data.map((data, index) => \r\n                <div key={index}>\r\n                    <h3>{index}</h3>\r\n                    <p>{data.EmpID}</p>\r\n                    <p>{data.ProjectID}</p>\r\n                    <p>{data.DateFrom}</p>\r\n                    <p>{ data.DateTo === 'NULL' ? 'Today' : data.DateTo }</p>\r\n                </div>)\r\n        } */}\r\n        <Table striped='columns' bordered hover>\r\n        {\r\n            data.map((data, index) =>\r\n            <thead key={index}>\r\n            <tr>\r\n            <th>{index}</th>\r\n            <th>{data.EmpID}</th>\r\n            <th>{data.ProjectID}</th>\r\n            <th>{data.DateFrom}</th>\r\n            <th>{ data.DateTo === 'NULL' ? 'Today' : data.DateTo }</th>\r\n            </tr>\r\n      </thead>)\r\n        }\r\n        </Table>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default DataCollecting;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,KAAK,MAAM,uBAAuB;AAAC;AAE1C,MAAMC,cAAc,GAAG,MAAM;EAAA;EAEzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACM,GAAG,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACnC,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMU,UAAU,GAAIC,CAAC,IAAK;IACtB;IACA,IAAIA,CAAC,CAACC,MAAM,CAACC,KAAK,CAACC,MAAM,EAAE;MACvB,MAAMC,SAAS,GAAGJ,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;;MAEvC;MACA,MAAMG,aAAa,GAAGD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACnD,IAAKF,aAAa,KAAK,KAAK,EAAE;QAC1BG,KAAK,CAAC,kBAAkB,CAAC;MAC7B,CAAC,MAAI;QACDA,KAAK,CAAC,SAAS,CAAC;MACpB;MACAV,OAAO,CAACM,SAAS,CAAC;IACtB;EACJ,CAAC;EAEG,MAAMK,QAAQ,GAAG,MAAM;IAEnB;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEAnB,IAAI,CAACoB,KAAK,CAACb,IAAI,EAAE;MACbc,MAAM,EAAE,IAAI;MACZC,QAAQ,EAAEC,OAAO,IAAI;QACnBnB,OAAO,CAACmB,OAAO,CAACpB,IAAI,CAAC;MACvB;IACF,CAAC,CAAC;IAEFqB,OAAO,CAACC,GAAG,CAAClB,IAAI,EAAEJ,IAAI,CAAC;EAC7B,CAAC;EAED,oBACA;IAAA,wBACI;MAAA,UAAO;IAAoB;MAAA;MAAA;MAAA;IAAA,QAAQ,eACnC;MAAO,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAEM,UAAW;MAAC,MAAM,EAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAE,eACxD;MAAQ,OAAO,EAAEU,QAAS;MAAA,UAAE;IAAS;MAAA;MAAA;MAAA;IAAA,QAAS,eAC9C;MAAA,uBAWA,QAAC,KAAK;QAAC,OAAO,EAAC,SAAS;QAAC,QAAQ;QAAC,KAAK;QAAA,UAEnChB,IAAI,CAACuB,GAAG,CAAC,CAACvB,IAAI,EAAEwB,KAAK,kBACrB;UAAA,uBACA;YAAA,wBACA;cAAA,UAAKA;YAAK;cAAA;cAAA;cAAA;YAAA,QAAM,eAChB;cAAA,UAAKxB,IAAI,CAACyB;YAAK;cAAA;cAAA;cAAA;YAAA,QAAM,eACrB;cAAA,UAAKzB,IAAI,CAAC0B;YAAS;cAAA;cAAA;cAAA;YAAA,QAAM,eACzB;cAAA,UAAK1B,IAAI,CAAC2B;YAAQ;cAAA;cAAA;cAAA;YAAA,QAAM,eACxB;cAAA,UAAM3B,IAAI,CAAC4B,MAAM,KAAK,MAAM,GAAG,OAAO,GAAG5B,IAAI,CAAC4B;YAAM;cAAA;cAAA;cAAA;YAAA,QAAO;UAAA;YAAA;YAAA;YAAA;UAAA;QACtD,GAPOJ,KAAK;UAAA;UAAA;UAAA;QAAA,QAQf;MAAC;QAAA;QAAA;QAAA;MAAA;IAEC;MAAA;MAAA;MAAA;IAAA,QACF;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEV,CAAC;AAAA,GAhFKzB,cAAc;AAAA,KAAdA,cAAc;AAkFpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}