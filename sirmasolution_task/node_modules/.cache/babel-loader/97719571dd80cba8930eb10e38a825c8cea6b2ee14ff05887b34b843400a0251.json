{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alesa\\\\Desktop\\\\SirmaSolutions_Front-End_React js_Task\\\\sirmasolution_task\\\\src\\\\components\\\\dataCollecting.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport Table from 'react-bootstrap/Table';\nimport { Col, Row, Button } from 'react-bootstrap';\nimport './dataCollecting.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataCollecting = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [file, setFile] = useState('');\n  const FileChange = e => {\n    //Takes the name of the file\n    if (e.target.files.length) {\n      const inputFile = e.target.files[0];\n\n      //Takes the format after spliting the 'text/{type of file} and checks if is 'Cvs'\n      const fileExtension = inputFile === null || inputFile === void 0 ? void 0 : inputFile.type.split(\"/\")[1];\n      if (fileExtension !== 'csv') {\n        alert('Input csv file !');\n      } else {\n        alert('correct');\n      }\n      setFile(inputFile);\n    }\n  };\n  const ShowData = () => {\n    Papa.parse(file, {\n      header: true,\n      complete: results => {\n        setData(results.data);\n      }\n    });\n    console.log(file, data);\n  };\n  return /*#__PURE__*/_jsxDEV(Col, {\n    className: \"column g-0\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"row g-0\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Upload file to check\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: FileChange,\n        accept: \".csv\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"secondary\",\n      onClick: ShowData,\n      children: \"Show data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee ID \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ProjectID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"DataFrom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"DataTo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), data.map((data, index) => /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.EmpID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.ProjectID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.DateFrom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.DateTo === 'NULL' ? 'Today' : data.DateTo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(DataCollecting, \"F4qODXyotVveLcAf+4MTZCbpEMA=\");\n_c = DataCollecting;\nexport default DataCollecting;\nvar _c;\n$RefreshReg$(_c, \"DataCollecting\");","map":{"version":3,"names":["React","useState","Papa","Table","Col","Row","Button","DataCollecting","data","setData","file","setFile","FileChange","e","target","files","length","inputFile","fileExtension","type","split","alert","ShowData","parse","header","complete","results","console","log","map","index","EmpID","ProjectID","DateFrom","DateTo"],"sources":["C:/Users/alesa/Desktop/SirmaSolutions_Front-End_React js_Task/sirmasolution_task/src/components/dataCollecting.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Papa from 'papaparse'\r\nimport Table from 'react-bootstrap/Table';\r\nimport { Col, Row, Button } from 'react-bootstrap'\r\n\r\nimport './dataCollecting.css'\r\n\r\nconst DataCollecting = () => {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [file, setFile] = useState('');\r\n\r\n    const FileChange = (e) => {\r\n        //Takes the name of the file\r\n        if (e.target.files.length) {\r\n            const inputFile = e.target.files[0];\r\n\r\n        //Takes the format after spliting the 'text/{type of file} and checks if is 'Cvs'\r\n        const fileExtension = inputFile?.type.split(\"/\")[1];\r\n        if ( fileExtension !== 'csv') {\r\n            alert('Input csv file !');\r\n        }else{\r\n            alert('correct');\r\n        }\r\n        setFile(inputFile);\r\n    }\r\n}\r\n\r\n    const ShowData = () => {\r\n\r\n        Papa.parse(file, {\r\n            header: true,\r\n            complete: results => {\r\n              setData(results.data)\r\n            },\r\n          });\r\n\r\n          console.log(file, data)\r\n    }\r\n\r\n    return (\r\n    <Col className='column g-0'>\r\n        <Row className='row g-0'>\r\n        <label>Upload file to check</label>\r\n        <input type='file' onChange={FileChange} accept='.csv'/>\r\n        </Row>\r\n        <Button variant='secondary' onClick={ShowData}>Show data</Button>\r\n        <Table striped bordered hover variant='dark'>\r\n        <thead>\r\n        <tr>\r\n          <th>Employee ID </th>\r\n          <th>ProjectID</th>\r\n          <th>DataFrom</th>\r\n          <th>DataTo</th>\r\n        </tr>\r\n       </thead>\r\n        {\r\n            data.map((data, index) =>\r\n            <tbody key={index}>\r\n            <tr>\r\n            <td>{data.EmpID}</td>\r\n            <td>{data.ProjectID}</td>\r\n            <td>{data.DateFrom}</td>\r\n            <td>{ data.DateTo === 'NULL' ? 'Today' : data.DateTo }</td>\r\n            </tr>\r\n           </tbody>)\r\n        }\r\n        </Table>\r\n    </Col>\r\n    )\r\n}\r\n\r\nexport default DataCollecting;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}